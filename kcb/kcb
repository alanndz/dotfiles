#!/usr/bin/env bash
#
# Copyright (C) 2021 @alanndz (Telegram and Github)
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Kernel sCript Builder (kcb)
# Script Build kernel for vayu or Poco X3 Pro
# Credit to: Rama Bondan Prakoso (rama982)
#

export TZ=":Asia/Makassar"
conf="$HOME/.kcb"

usage() {
echo -n "Author: alanndz
Usage: $(basename "$0") [OPTIONS] [COMMAND]

Options:
 -c | --clean     : Full clean
 -d | --dirty     : Dirty clean
 -n | --codename  <Codename>
 -C | --directory <Directory>
 -D | --defconfig <Defconfig>
 -j | --jobs      <Jobs number>
 -e | --env       <Env>
 -t | --telegram  <Chat id> <telegram bot>
 -r | --regen     : Regenerate configs
 -p | --compiler  <gcc/clang> default clang
 -l | --lto       : Build using full LTO
 -h | --help      : Show usage
"
exit
}

_conf() {
    mkdir -p $conf
    echo "$(openssl enc -base64 <<< ${1})" > $conf/.chat_id
    echo "$(openssl enc -base64 <<< ${2})" > $conf/.token
    exit
}

sendInfo() {
    if [[ ! -n $CHAT_ID || ! -n $TOKEN ]]; then return; fi
    curl -s -X POST https://api.telegram.org/bot$TOKEN/sendMessage -d chat_id=$CHAT_ID -d "parse_mode=HTML" -d text="$(
            for POST in "${@}"; do
                echo "${POST}"
            done
        )"
&>/dev/null
}

push() {
    if [[ ! -n $CHAT_ID || ! -n $TOKEN ]]; then return; fi
    curl -F document=@"$1" "https://api.telegram.org/bot$TOKEN/sendDocument" \
		-F chat_id="$CHAT_ID" \
		-F "disable_web_page_preview=true" \
		-F "parse_mode=html" \
		-F caption="Build took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s). | #aLn | <b>vayu</b>"
}

while (( ${#} )); do
  case ${1} in
       "-c"|"--clean") CLEAN=true ;;
       "-d"|"--dirty") DIRTY=true ;;
       "-n"|"--codename") shift; CODENAME="-${1}" ;;
       "-C"|"--directory") shift; DIR=${1} ;;
       "-D"|"--defconfig") shift; CONFIG=${1} ;;
       "-j"|"--jobs") shift; JOBS=${1} ;;
       "-e"|"--env") shift; ENV=${1} ;;
       "-r"|"--regen") REGEN=true ;;
       "-t"|"--telegram") shift; _conf ${1} ${2}; shift;;
       "-p"|"--compiler") shift; COMPILER=${1}; shift;;
       "-l"|"--lto") LTO=true ;;
       "-h"|"--help") usage ;;
  esac
  shift
done

if [[ -n ${DIR} ]]; then
  cd ${DIR}
fi
if [[ ! -f Makefile ]]; then
  echo "This not in rootdir kernel, please check directory again"
  exit 1
fi

# Setup environment
KDIR=$(pwd)
TC="${HOME}/.kcb-tools"
AK=${TC}/AnyKernel
KERNEL_NAME="aLn"
KERNEL_TYPE="EAS"
PHONE="Poco X3 Pro"
DEVICE="vayu"
CONFIG=${CONFIG:-vayu_defconfig}
CODENAME=${CODENAME:--Testing}
JOBS=${JOBS:-$(nproc --all)}
COMPILER=${COMPILER:-clang}
CHAT_ID="$(openssl enc -base64 -d <<< `cat $conf/.chat_id`)"
TOKEN="$(openssl enc -base64 -d <<< `cat $conf/.token`)"
DEVELOPER="alanndz"
HOST="noob_vayu-dev"
AK_BRANCH="vayu"

if [[ ${COMPILER} == "clang" ]]; then
  git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 --no-tags --single-branch -b master $TC/dcl/clang
  git clone https://github.com/mvaisakh/gcc-arm64 --depth=1 --no-tags --single-branch $TC/dcl/gcc64
  git clone https://github.com/mvaisakh/gcc-arm --depth=1 --no-tags --single-branch $TC/dcl/gcc32

  CL="$TC/dcl/clang/clang-r510928"
  export PATH="${CL}/bin:$PATH"
  export LD_LIBRARY_PATH="${Cl}/lib:$LD_LIBRARY_PATH"
  KBUILD_COMPILER_STRING=$("${CL}/bin/clang" --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
  GCC64=$(ls ${TC}/dcl/gcc64/bin/aarch64*-gcc | sed 's/gcc$//')
  GCC32=$(ls ${TC}/dcl/gcc32/bin/arm*-gcc | sed 's/gcc$//')
  ENV="CC=clang LLVM=1"

elif [[ ${COMPILER} == "gcc" ]]; then
  CL="$TC/gc/gcc64"
  git clone https://github.com/silont-project/aarch64-elf-gcc -b arm64/11 --depth=1 $TC/gcc/gcc64
  git clone https://github.com/silont-project/arm-eabi-gcc -b arm/11 --depth=1 $TC/gcc/gcc32

  export PATH="${CL}/bin:$PATH"
  KBUILD_COMPILER_STRING=$(${TC}/gcc64/bin/aarch64*-elf-gcc --version | head -n 1)
  GCC64=$(ls ${TC}/gcc/gcc64/bin/aarch64*-gcc | sed 's/gcc$//')
  GCC32=$(ls ${TC}/gcc/gcc32/bin/arm*-gcc | sed 's/gcc$//')
  ENV="CROSS_COMPILE_COMPAT=${GCC32}"
fi

if [[ -d $AK ]]; then
  git clone https://github.com/alanndz/AnyKernel3 -b $AK_BRANCH ${AK}
fi

# Setup name
GIT="$(git log --pretty=format:'%h' -1)"
ENDZ="${GIT}-$(date "+%d%m%Y-%H%M")"
KVERSION="${CODENAME}-${GIT}"
ZIP_NAME="${KERNEL_NAME}${CODENAME}-${DEVICE}-${ENDZ}.zip"
LOG=$(echo ${ZIP_NAME} | sed "s/.zip/.log/")
LOGE=$(echo ${ZIP_NAME} | sed "s/.zip/.error.log/")

# Setup clang environment
IMG="$KDIR/out/arch/arm64/boot/Image"
DTBO="$KDIR/out/arch/arm64/boot/dtbo.img"
DTB="$KDIR/out/arch/arm64/boot/dts/qcom"

set_defconfig() {
  case ${1} in
    enable)
      scripts/config --file out/.config -e ${2} ;;
    disable)
      scripts/config --file out/.config -d ${2} ;;
  esac
}

xcache() {
  export CCACHE_EXEC=$(which ccache)
  export USE_CCACHE=1
  export CCACHE_DIR=$KDIR/.ccache
  ccache -M 20G >/dev/null
  # ccache -o compression=true
}

m() {
  make -j${JOBS} O=out \
                        ARCH=arm64 \
                        LOCALVERSION=${KVERSION} \
                        CROSS_COMPILE="${GCC64}" \
                        CROSS_COMPILE_ARM32="${GCC32}" \
                        ${ENV} \
                        ${@}
}

START=$(date +"%s")

# xcache

if [[ -n ${REGEN} ]]; then
  m $CONFIG
  #m menuconfig
  vi out/.config
  m savedefconfig
  cp out/defconfig arch/arm64/configs/$CONFIG
  exit 0
fi

if [[ -n ${CLEAN} ]]; then
  m mrproper 2>/dev/null
  m clean 2>/dev/null
fi

# Build kernel
rm -rf ${IMG}
rm -rf ${DTBO}

m $CONFIG > /dev/null
if [[ ! -n $LTO ]]; then set_defconfig enable CONFIG_THINLTO; fi
set_defconfig enable CONFIG_BUILD_ARM64_DTBO_IMG
set_defconfig disable CONFIG_LOCALVERSION_AUTO
m > >(tee out/${LOG}) 2> >(tee out/${LOGE} >&2)

END=$(date +"%s")
DIFF=$(($END - $START))

sendInfo "<b>----- ${KERNEL_NAME} New Kernel -----</b>" \
	"<b>Device:</b> ${DEVICE} or ${PHONE}" \
	"<b>Name:</b> <code>${KERNEL_NAME}${KVERSION}</code>" \
	"<b>Kernel Version:</b> <code>$(make kernelversion)</code>" \
	"<b>Type:</b> <code>${KERNEL_TYPE}</code>" \
	"<b>Branch:</b> <code>$(git branch --show-current)</code>" \
	"<b>Commit:</b> <code>$(git log --pretty=format:'%h : %s' -1)</code>" \
	"<b>Started on:</b> <code>$(hostname)</code>" \
	"<b>Compiler:</b> <code>${KBUILD_COMPILER_STRING}</code>"

if [[ ! -f ${IMG} ]]; then
  echo "Failed build!"
  push out/${LOG}
  push out/${LOGE}
  exit 1
fi

make -C ${AK} clean
cp ${IMG} ${AK}
cp ${DTBO} ${AK}
find ${DTB} -name "*.dtb" -exec cat {} + > ${AK}/dtb
make -C ${AK} ZIP="${ZIP_NAME}" normal

push ${AK}/${ZIP_NAME}
push out/${LOG}
